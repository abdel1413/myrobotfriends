{"version":3,"sources":["Card.js","CardList.js","robots.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","robotlist","map","user","i","username","SearchBox","searchField","SearchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filterRobots","filter","robot","toLowerCase","includes","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAiBeA,EAbF,SAACC,GAAS,IACXC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GACnB,OACI,sBAAKC,UAAY,mDAAjB,UACI,qBAAKC,IAAK,QAAQC,IAAG,+BAA4BH,EAA5B,cACrB,gCACG,mCAAMF,KACL,4BAAIC,WCWLK,EAjBC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACPC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAChC,OAAQ,cAAC,EAAD,CACJT,GAAMK,EAAOI,GAAGT,GAChBF,KAAQO,EAAOI,GAAGX,KAClBC,MAASM,EAAOI,GAAGV,OAHHU,MAOxB,OACI,gCACIH,EADJ,QCfKD,EAAS,CACpB,CACEL,GAAI,EACJF,KAAM,gBACNY,SAAU,OACVX,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNY,SAAU,YACVX,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNY,SAAU,WACVX,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNY,SAAU,WACVX,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNY,SAAU,SACVX,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNY,SAAU,mBACVX,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNY,SAAU,eACVX,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNY,SAAU,gBACVX,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNY,SAAU,WACVX,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNY,SAAU,iBACVX,MAAO,2BC1CIY,EAbG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC5B,OACA,qBAAKZ,UAAY,MAAjB,SACK,uBAAQA,UAAY,wCACpBa,KAAO,SACPC,YAAc,gBACdC,SAAYH,OC+DNI,G,wDAjDb,aAAc,IAAD,8BACX,gBAQFC,eAAiB,SAACC,GAKhB,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAZzC,EAAKC,MAAQ,CACXlB,OAAQ,SACRO,YAAa,KAJJ,E,qDAoBJ,IAAD,OAGAY,EAAenB,EAAOoB,QAAO,SAAAC,GACjC,OAAOA,EAAM5B,KAAK6B,cAAcC,SAAS,EAAKL,MAAMX,YAAYe,kBAGlE,OACE,sBAAM1B,UAAY,KAAlB,UACE,oBAAIA,UAAW,KAAf,0BAGA,cAAC,EAAD,CAAaY,aAAgBgB,KAAKX,iBAQlC,cAAC,EAAD,CAAUb,OAAUmB,W,GAzCVM,cCXEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCNNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.38bd3c41.chunk.js","sourcesContent":["import React from 'react';\n\n//we can also destructure props like:\n// const Card = ({ name,email, id}) =>{....}\nconst Card = (props)=>{\n    const { name,email,id} = props;\n    return (\n        <div className = 'bg-light-green dib br3 pa1 ma2 grow bw2 shadow-5'>\n            <img alt ='photo' src = {`https://robohash.org/${id}?100x100`} ></img>\n            <div>\n               <h2> {name}</h2> \n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n//import {robots }from './robots'\n\n\nconst CardList =({robots})=>{\n    const  robotlist = robots.map((user,i)=>{\n        return (<Card key ={i} \n            id = {robots[i].id} \n            name = {robots[i].name} \n            email = {robots[i].email}\n            />\n            )\n    });\n    return (\n        <div>\n           {robotlist};\n        </div>\n\n    );\n\n}\nexport default CardList;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\n\n\n\nconst SearchBox = ({searchField,SearchChange}) =>{\n    return (\n    <div className = 'pa1'>\n         <input  className = 'pa2 ba ma3 b--green bg-lightest-blue ' \n         type = 'search' \n         placeholder = 'search robots'\n         onChange ={ SearchChange} />\n\n\n    </div>\n       \n    );\n}\nexport default SearchBox;","import React , {Component}from 'react';\nimport CardList from './CardList';\nimport { robots } from './robots';\nimport SearchBox from './SearchBox'\nimport './App.css'\n\n\n//function component\n\n// const App= ()=> {\n//   return (\n//     <div className = 'tc'>\n//       <h1> My RobotFriends</h1>\n//       <SearchBox />\n//       <CardList  robots = {robots}/>   //cardlist receive an attribute(props)\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n//classs component\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      robots: 'robots',\n      searchField: ' '\n    }\n  }\n  \n  //create a fnc to get triggered whenever somthg is entered in SearchBox\n  onSearchChange = (event) =>{\n\n    // console.log(event.target.value)\n\n    //set searchField to get value entered\n    this.setState({searchField: event.target.value})\n\n    \n    // console.log(filterRobots)\n  }\n\n  render(){\n\n    //filter robots\n    const filterRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n    })\n\n    return (\n      < div className = 'tc'>\n        <h1 className ='f1'>RobotFriends</h1>\n\n        {/* pass attribute to searchbox */}\n        <SearchBox   SearchChange = {this.onSearchChange}/>\n\n        {/* <CardList  robots = {robots}/>   //cardlist receive an attribute(props) */}\n\n        {/* robot passed as prop */}\n        {/* <CardList robots = {robots}/> */}\n        \n        {/* now pass filterRobot instead of robots */}\n        <CardList robots = {filterRobots}/>\n\n      </div>\n    );\n  \n  }\n   \n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import Card from './Card'\nimport * as serviceWorker from './serviceWorker';\nimport './tachyons';\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}